service: websocket-chat-app

frameworkVersion: '4'

plugins:
  - serverless-s3-sync

provider:
  name: aws
  runtime: nodejs22.x 
  region: us-west-2 
  stage: dev 
  memorySize: 128 
  timeout: 10 
  environment:
    CONNECTIONS_TABLE_NAME: ${self:service}-connections-${sls:stage} 
  iam: 
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:CreateTable
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-connections-${sls:stage}
        - Effect: Allow
          Action:
            - execute-api:ManageConnections
          Resource: arn:aws:execute-api:${aws:region}:${aws:accountId}:*/@connections/*
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket
            - s3:DeleteObject
          Resource:
            - arn:aws:s3:::${self:service}-frontend-${sls:stage}
            - arn:aws:s3:::${self:service}-frontend-${sls:stage}/*

functions:
  connect:
    handler: dist/handler.connect 
    events:
      - websocket:
          route: $connect 

  disconnect:
    handler: dist/handler.disconnect 
    events:
      - websocket:
          route: $disconnect

  sendMessage:
    handler: dist/handler.sendMessage 
    events:
      - websocket:
          route: $default

resources:
  Resources:
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-connections-${sls:stage}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S # String type for connectionId
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    # S3 Bucket for the Frontend
    FrontendBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-frontend-${sls:stage}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        Tags:
          - Key: Project
            Value: WebSocketChatDemo
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - "*" # Be more specific in production to your API Gateway domain
              ExposedHeaders:
                - ETag
              MaxAge: 3000
        PublicAccessBlockConfiguration:
          BlockPublicPolicy: false
          RestrictPublicBuckets: false

    # S3 Bucket Policy to allow public read access
    FrontendBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref FrontendBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: !Join [ "", [ "arn:", !Ref "AWS::Partition", ":s3:::", !Ref FrontendBucket, "/*" ] ]

  Outputs:
    FrontendWebsiteUrl:
      Description: "URL for the static frontend website hosted on S3"
      Value: !GetAtt FrontendBucket.WebsiteURL


# S3 Sync Configuration
custom:
  s3Sync:
    - bucketName: ${self:service}-frontend-${sls:stage} 
      localDir: public 
      deleteRemoved: false
